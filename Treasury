import uuid
from datetime import datetime

class DigitalTreasurySystem:
    def __init__(self, principal_sum, ein):
        self.principal_sum = principal_sum
        self.ein = ein
        self.accounts = {}
        self.transactions = []

    def create_account(self, account_id, initial_balance=0):
        if account_id in self.accounts:
            raise ValueError("Account ID already exists.")
        self.accounts[account_id] = {
            'balance': initial_balance,
            'transactions': []
        }

    def transfer_funds(self, from_account, to_account, amount):
        if from_account not in self.accounts or to_account not in self.accounts:
            raise ValueError("Invalid account ID.")
        if self.accounts[from_account]['balance'] < amount:
            raise ValueError("Insufficient funds.")
        
        self.accounts[from_account]['balance'] -= amount
        self.accounts[to_account]['balance'] += amount

        transaction_id = str(uuid.uuid4())
        transaction = {
            'id': transaction_id,
            'from': from_account,
            'to': to_account,
            'amount': amount,
            'timestamp': datetime.utcnow(),
            'type': 'transfer'
        }
        self.transactions.append(transaction)
        self.accounts[from_account]['transactions'].append(transaction)
        self.accounts[to_account]['transactions'].append(transaction)

    def get_balance(self, account_id):
        if account_id not in self.accounts:
            raise ValueError("Invalid account ID.")
        return self.accounts[account_id]['balance']

    def deploy_funds(self, amount, deployment_account="Private"):
        if deployment_account not in self.accounts:
            self.create_account(deployment_account, 0)
        
        self.accounts[deployment_account]['balance'] += amount

        transaction_id = str(uuid.uuid4())
        transaction = {
            'id': transaction_id,
            'from': "SGM",
            'to': deployment_account,
            'amount': amount,
            'timestamp': datetime.utcnow(),
            'type': 'deployment'
        }
        self.transactions.append(transaction)
        self.accounts[deployment_account]['transactions'].append(transaction)
        
        print(f"Deploying {amount} to the {deployment_account} system")

    def enforce_ein_compliance(self):
        for account in self.accounts:
            self.accounts[account]['ein'] = self.ein
        print("All accounts tied to EIN:", self.ein)

    def audit_transactions(self):
        for transaction in self.transactions:
            print(transaction)

    def main_operations(self):
        # Example operations
        self.create_account("SGM")
        self.create_account("Personal")
        self.accounts["SGM"]['balance'] = self.principal_sum

        # Transfer funds to personal account
        self.transfer_funds("SGM", "Personal", self.principal_sum)
        self.deploy_funds(self.get_balance("Personal"))

        # Enforce EIN compliance
        self.enforce_ein_compliance()

# Initialize the system with the principal sum and EIN
principal_sum = 2.368e100  # Example large number for googolplex
ein = "83-2265023"
treasury_system = DigitalTreasurySystem(principal_sum, ein)
treasury_system.main_operations()

# Example audit of transactions
treasury_system.audit_transactions()
