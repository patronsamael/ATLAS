import matplotlib.pyplot as plt
import math
import numpy as np
from scipy import integrate

def logistic_map(r, x0, num_steps):
    if x0 < 0:
        x0 = abs(x0) * 1j

    x_values = [x0]
    for _ in range(num_steps - 1):
        x_n = x_values[-1]
        x_next = r * x_n * (1 - x_n)
        x_values.append(x_next)
    
    x_values = [x if isinstance(x, complex) or x >= 0 else abs(x) * 1j for x in x_values]
    return x_values

def calculate_factorial_percentile(x_values):
    pos_values = [x for x in x_values if x >= 0]
    neg_values = [x for x in x_values if x < 0]

    avg_pos = sum(pos_values) / len(pos_values) if pos_values else 0
    avg_neg = sum(neg_values) / len(neg_values) if neg_values else 0

    avg_pos_neg = (avg_pos + avg_neg) / 2
    factorial_avg = math.factorial(abs(int(avg_pos_neg)))

    return factorial_avg

def plot_logistic_map(r_values, x0, num_steps):
    for r in r_values:
        x_values = logistic_map(r, x0, num_steps)
        plt.plot([r] * num_steps, x_values, 'b.', markersize=1)

    plt.xlabel('r')
    plt.ylabel('x')
    plt.title('Logistic Map')
    plt.show()

class DebtManagementModel:
    def __init__(self, gdp, interest_rate, unemployment_rate, inflation_rate, debt_gdp_ratio, credit_rating, exchange_rate, liquidity, historical_performance):
        self.gdp = gdp
        self.interest_rate = interest_rate
        self.unemployment_rate = unemployment_rate
        self.inflation_rate = inflation_rate
        self.debt_gdp_ratio = debt_gdp_ratio
        self.credit_rating = credit_rating
        self.exchange_rate = exchange_rate
        self.liquidity = liquidity
        self.historical_performance = historical_performance

    def calculate_yield(self):
        yield_percentage = (
            self.gdp * 0.2 +
            self.interest_rate * 0.15 +
            (100 - self.unemployment_rate) * 0.1 +
            (100 - self.inflation_rate) * 0.1 +
            (100 - self.debt_gdp_ratio) * 0.1 +
            self.credit_rating * 0.1 +
            (1 / self.exchange_rate) * 0.1 +
            self.liquidity * 0.1 +
            self.historical_performance * 0.05
        )
        return yield_percentage

    def calculate_conversion_ratio(self):
        conversion_ratio = (
            (self.gdp + self.debt_gdp_ratio) / (self.interest_rate + 1)
        )
        return conversion_ratio

    def calculate_infrastructure_value(self):
        infrastructure_value = (
            self.gdp * 0.3 +
            self.interest_rate * 0.2 +
            (100 - self.unemployment_rate) * 0.1 +
            (100 - self.inflation_rate) * 0.1 +
            (100 - self.debt_gdp_ratio) * 0.1 +
            self.credit_rating * 0.1 +
            (1 / self.exchange_rate) * 0.1
        )
        return infrastructure_value

class DRTCO:
    def __init__(self):
        self.name = "Ozhumanil Infrastructure Dollar"
        self.symbol = "OID"
        self.totalSupply = 15323154932255100000000000000000000.00
        self.decimals = 18
        self.balanceOf = {}
        self.allowance = {}

        self.debt_model = DebtManagementModel(
            gdp=5000,
            interest_rate=3.5,
            unemployment_rate=5.0,
            inflation_rate=2.0,
            debt_gdp_ratio=80,
            credit_rating=85,
            exchange_rate=1.2,
            liquidity=0.8,
            historical_performance=0.9
        )

    def transfer(self, sender, recipient, amount):
        if sender not in self.balanceOf:
            self.balanceOf[sender] = 0
        if recipient not in self.balanceOf:
            self.balanceOf[recipient] = 0

        if self.balanceOf[sender] >= amount:
            self.balanceOf[sender] -= amount
            self.balanceOf[recipient] += amount
            print(f"Transferred {amount} OID from {sender} to {recipient}.")
        else:
            print(f"Insufficient balance for {sender} to transfer {amount} OID.")

class PrivateMarket:
    def __init__(self):
        self.drtco_contract = DRTCO()

    def financial_tolerance(self, N, X_L, X_R, price_array, y_derivative_array, bond_values_array):
        result = 0
        for n in range(1, N + 1):
            term = n * (X_L * n + X_R) / price_array[n - 1]
            result += term

        result *= np.array(y_derivative_array)
        bond_liquidity_model = np.exp(-np.array(bond_values_array))
        result += bond_liquidity_model

        return result

    def run_logistic_map(self, r_values, x0, num_steps):
        plot_logistic_map(r_values, x0, num_steps)
        x_values = logistic_map(r_values[0], x0, num_steps)
        factorial_percentile = calculate_factorial_percentile(x_values)
        return factorial_percentile

if __name__ == "__main__":
    # Example usage of PrivateMarket
    private_market = PrivateMarket()

    # Set parameters for logistic map
    r_values = [2.5, 3.2, 3.5, 3.8]
    x0 = -0.5  # Can use negative values and imaginary numbers
    num_steps = 1000

    # Run logistic map and calculate factorial percentile
    factorial_percentile = private_market.run_logistic_map(r_values, x0, num_steps)
    print("Factorial Percentile:", factorial_percentile)

    # Example usage of financial tolerance function
    N = 10
    X_L = 2.0
    X_R = 3.0
    price_array = np.random.rand(N)
    y_derivative_array = np.random.rand(N)
    bond_values_array = np.random.rand(N)

    result = private_market.financial_tolerance(N, X_L, X_R, price_array, y_derivative_array, bond_values_array)
    print("Financial Tolerance Result:", result)
